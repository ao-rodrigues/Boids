// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BoidCompute

struct Boid {
    float3 position;
    float3 velocity;
    
    float3 perceivedCentre;
    float3 perceivedVelocity;
    float3 displacement;
};

unsigned int numBoids;
float awarenessRadius;
float minDistance;
float alignmentRate;


RWStructuredBuffer<Boid> boidData;

[numthreads(1024,1,1)]
void BoidCompute (uint3 id : SV_DispatchThreadID) {
    boidData[id.x].perceivedCentre = float3(0, 0, 0);
    boidData[id.x].perceivedVelocity = float3(0, 0, 0);
    boidData[id.x].displacement = float3(0, 0, 0);
    
    int found = 0;

    for(unsigned int i = 0; i < numBoids; i++){
        if(id.x != i){
            float3 dist = boidData[i].position - boidData[id.x].position;
            
            if(length(dist) <= awarenessRadius){
                boidData[id.x].perceivedCentre += dist;
                boidData[id.x].perceivedVelocity += boidData[i].velocity;
                found++;
            }
        
            if(length(dist) < minDistance){
                boidData[id.x].displacement -= dist;
            }
        }
    }
    
    //boidData[id.x].displacement = displacement; 
    
    if (found > 0){
        boidData[id.x].perceivedCentre /= found;
        //boidData[id.x].velocity += (perceivedCentre - float3(0, 0, 0)) * (length(perceivedCentre) / awarenessRadius);
        
        boidData[id.x].perceivedVelocity /= found;
        //boidData[id.x].velocity += (perceivedVelocity - boidData[id.x].velocity) * alignmentRate;
    }
}
